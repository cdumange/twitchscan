// Code generated by mockery v2.14.0. DO NOT EDIT.

package gocess

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockProcess is an autogenerated mock type for the Process type
type MockProcess[T interface{}] struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, input
func (_m *MockProcess[T]) Execute(ctx context.Context, input T) (T, error) {
	ret := _m.Called(ctx, input)

	var r0 T
	if rf, ok := ret.Get(0).(func(context.Context, T) T); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(T)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, T) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockProcess interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockProcess creates a new instance of MockProcess. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockProcess[T interface{}](t mockConstructorTestingTNewMockProcess) *MockProcess[T] {
	mock := &MockProcess[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
